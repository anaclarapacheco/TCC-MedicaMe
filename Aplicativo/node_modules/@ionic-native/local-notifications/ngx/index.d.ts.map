{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport declare enum ELocalNotificationTriggerUnit {\n    SECOND = \"second\",\n    MINUTE = \"minute\",\n    HOUR = \"hour\",\n    DAY = \"day\",\n    WEEK = \"week\",\n    MONTH = \"month\",\n    QUARTER = \"quarter\",\n    YEAR = \"year\",\n    WEEKDAY = \"weekday\",\n    WEEKDAY_ORDINAL = \"weekdayOrdinal\",\n    WEEK_OF_MONTH = \"weekOfMonth\"\n}\nexport interface ILocalNotificationEvery {\n    /**\n     * The minute.\n     */\n    minute?: number;\n    /**\n     * The hour.\n     */\n    hour?: number;\n    /**\n     * The day.\n     */\n    day?: number;\n    /**\n     * The day of week.\n     */\n    weekday?: number;\n    /**\n     * The week of yeaday of the ardinal week.\n     */\n    week?: number;\n    /**\n     * The day of the ordinal week.\n     */\n    weekdayOrdinal?: number;\n    /**\n     * The week of month.\n     */\n    weekOfMonth?: number;\n    /**\n     * The month.\n     */\n    month?: number;\n    /**\n     * The quarter.\n     */\n    quarter?: number;\n    /**\n     * The year.\n     */\n    year?: number;\n}\nexport interface ILocalNotificationTrigger {\n    /** ***** FIX ***** */\n    /**\n     * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\n     * Default: now ~ new Date()\n     */\n    at?: Date;\n    /** ***** TIMESPAN ***** */\n    /**\n     * Amount of units\n     */\n    in?: number;\n    /**\n     * Unit\n     */\n    unit?: ELocalNotificationTriggerUnit;\n    /** ***** REPEAT/MATCH ***** */\n    /**\n     * Amount of units\n     */\n    count?: number;\n    /**\n     * The unit\n     */\n    every?: ELocalNotificationTriggerUnit | ILocalNotificationEvery;\n    /**\n     * The end of the repeating notification\n     */\n    before?: Date;\n    /**\n     * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\n     * Only for \"repeat\"\n     * Default: now ~ new Date()\n     */\n    firstAt?: Date;\n    /**\n     * Only for \"match\"\n     */\n    after?: Date;\n    /** ***** LOCATION ***** */\n    /**\n     * IOS ONLY\n     * Center of the location\n     * Latitude and Longitude values\n     */\n    center?: number[];\n    /**\n     * IOS ONLY\n     * Radius in meters\n     */\n    radius?: number;\n    /**\n     * IOS ONLY\n     * Trigger on entry of the location\n     */\n    notifyOnEntry?: boolean;\n    /**\n     * IOS ONLY\n     * Trigger on exit of the location\n     */\n    notifyOnExit?: boolean;\n    /**\n     * IOS ONLY\n     * Trigger only once?\n     */\n    single?: boolean;\n}\nexport declare enum ILocalNotificationActionType {\n    INPUT = \"input\",\n    BUTTON = \"button\"\n}\n/**\n * Notification action\n *\n * @see https://github.com/katzer/cordova-plugin-local-notifications#actions\n */\nexport interface ILocalNotificationAction {\n    /**\n     * The id of the action is used as the event name in the listener function\n     */\n    id?: string;\n    /**\n     * The title of the notification message\n     */\n    title?: string;\n    /**\n     * Make this notification show when app in foreground.\n     */\n    foreground?: boolean;\n    /**\n     * Specifies whether the action causes the app to launch in the foreground\n     */\n    launch?: boolean;\n    /**\n     * If the value is 'decline' the action is displayed with special highlighting to indicate that it performs a destructive task\n     */\n    ui?: string;\n    /**\n     * Specifies whether the action requires that the userâ€™s device be unlocked.\n     * When the user selects an action with this option, the system prompts\n     * the user to unlock the device\n     */\n    needsAuth?: boolean;\n    /**\n     * The resource path of the action icon\n     */\n    icon?: string;\n    /**\n     * ANDROID ONLY\n     * An array of pre-defined choices for users input\n     */\n    choices?: string[];\n    /**\n     * ANDROID ONLY\n     * Specifies whether the user can provide arbitrary text values\n     */\n    editable?: boolean;\n    /**\n     * IOS ONLY\n     * The title of the text input button that is displayed to the user.\n     */\n    submitTitle?: string;\n    /**\n     * The type of the action. If omitted 'button' is used.\n     */\n    type?: ILocalNotificationActionType;\n}\nexport interface ILocalNotificationProgressBar {\n    /**\n     * Is the progress bar enabled?\n     */\n    enabled?: boolean;\n    /**\n     * The current value\n     */\n    value?: number;\n    /**\n     * ANDROID ONLY\n     * The maximum value (default is 100)\n     */\n    maxValue?: number;\n    /**\n     * ANDROID ONLY\n     * Show an indeterminate progress bar\n     */\n    indeterminate?: boolean;\n    /**\n     * WINDOWS ONLY\n     * Gets or sets an optional string to be displayed instead of the\n     * default percentage string. If this isn't provided, something\n     * like \"70%\" will be displayed.\n     */\n    description?: string;\n    /**\n     * WINDOWS ONLY\n     * Sets the status (required), which is displayed underneath the progress bar\n     * on the left.\n     * This string should reflect the status of the operation,\n     * like \"Downloading...\" or \"Installing...\"\n     */\n    status?: string;\n}\nexport interface ILocalNotification {\n    /**\n     * A unique identifier required to clear, cancel, update or retrieve the local notification in the future\n     * Default: 0\n     */\n    id?: number;\n    /**\n     * First row of the notification\n     * Default: Empty string (iOS) or the app name (Android)\n     */\n    title?: string;\n    /**\n     * Second row of the notification\n     * Default: Empty string\n     */\n    text?: string | string[];\n    /**\n     * The number currently set as the badge of the app icon in Springboard (iOS) or at the right-hand side of the local notification (Android)\n     * Default: 0 (which means don't show a number)\n     */\n    badge?: number;\n    /**\n     * Uri of the file containing the sound to play when an alert is displayed\n     * Default: res://platform_default\n     */\n    sound?: string;\n    /**\n     * Arbitrary data, objects will be encoded to JSON string\n     * Default: null\n     */\n    data?: any;\n    /**\n     * ANDROID ONLY\n     * Uri of the icon that is shown in the ticker and notification\n     * Default: res://icon\n     */\n    icon?: string;\n    /**\n     * ANDROID ONLY\n     * Uri of the resource (only res://) to use in the notification layouts. Different classes of devices may return different sizes\n     * Default: res://ic_popup_reminder\n     */\n    smallIcon?: string;\n    /**\n     * ANDROID ONLY\n     * RGB value for the background color of the smallIcon.\n     * Default: Androids COLOR_DEFAULT, which will vary based on Android version.\n     */\n    color?: string;\n    /**\n     * ANDROID ONLY\n     * Use the default notification vibrate.\n     */\n    vibrate?: boolean;\n    /**\n     * ANDROID ONLY\n     * Define the blinking of the LED on the device.\n     * If set to true, the LED will blink in the default color with\n     * timings for on and off set to 1000 ms.\n     * If set to a string, the LED will blink in this ARGB value with\n     * timings for on and off set to 1000 ms.\n     * If set to an array, the value of the key 0 will be used as the color,\n     * the value of the key 1 will be used as the 'on' timing, the value of\n     * the key 2 will be used as the 'off' timing\n     */\n    led?: {\n        color: string;\n        on: number;\n        off: number;\n    } | any[] | boolean | string;\n    /**\n     * Notification priority.\n     * Integers between -2 and 2, whereas -2 is minimum and 2 is maximum priority\n     */\n    priority?: number;\n    /**\n     * Is a silent notification\n     */\n    silent?: boolean;\n    /**\n     * Specifies whether the a click on the notification causes the app\n     * to launch in the foreground\n     */\n    launch?: boolean;\n    /**\n     * ANDROID ONLY\n     * Wakeup the device. (default is true)\n     */\n    wakeup?: boolean;\n    /**\n     * ANDROID ONLY\n     * Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled.\n     */\n    timeoutAfter?: number | false;\n    /**\n     * Actions id or actions\n     */\n    actions?: string | ILocalNotificationAction[];\n    /**\n     * When to trigger the notification\n     */\n    trigger?: ILocalNotificationTrigger;\n    /**\n     * A list of image attachments\n     */\n    attachments?: string[];\n    /**\n     * ANDROID ONLY\n     * If and how the notification shall show the when date.\n     * Possbile values:\n     *                  boolean: true equals 'clock', false disable a watch/counter\n     *                  'clock': Show the when date in the content view\n     *                  'chronometer': Show a stopwatch\n     *\n     */\n    clock?: boolean | string;\n    /**\n     * Shows a progress bar\n     * Setting a boolean is a shortcut for {enabled: true/false} respectively\n     */\n    progressBar?: ILocalNotificationProgressBar | boolean;\n    /**\n     * ANDROID ONLY\n     * If multiple notifications have the same group your app can present\n     * them as a single group.\n     */\n    group?: string;\n    /**\n     * ANDROID ONLY\n     * If set to 'true' this notification could use 'summary' to summarize\n     * the contents of the whole group\n     */\n    groupSummary?: boolean;\n    /**\n     * ANDROID ONLY\n     * Summary of the whole notification group. Should be used in conjuntion\n     * with 'groupSummary' set to true\n     */\n    summary?: string;\n    /**\n     * ANDROID ONLY\n     * Sets the number of items this notification represents.\n     */\n    number?: number;\n    /**\n     * ANDROID ONLY\n     * Set whether this is an \"ongoing\" notification.\n     * Ongoing notifications cannot be dismissed by the user,\n     * so your application or service must take care of canceling them.\n     */\n    sticky?: boolean;\n    /**\n     * ANDROID ONLY\n     * Make this notification automatically dismissed when the user touches it.\n     */\n    autoClear?: boolean;\n    /**\n     * ANDROID ONLY\n     * If set to true the notification will be show in its entirety on all lockscreens.\n     * If set to false it will not be revealed on a secure lockscreen.\n     */\n    lockscreen?: boolean;\n    /**\n     * ANDROID ONLY\n     * Set the default notification options that will be used.\n     * The value should be one or more of the following fields combined with\n     * bitwise-or: DEFAULT_SOUND, DEFAULT_VIBRATE, DEFAULT_LIGHTS.\n     */\n    defaults?: number;\n    /**\n     * ANDROID ONLY\n     * Specifies the channel the notification should be delivered on.\n     */\n    channel?: string;\n    /**\n     * ANDROID ONLY\n     * Set the token for the media session\n     */\n    mediaSession?: string;\n    /**\n     * Make this notification show when app in foreground.\n     */\n    foreground?: boolean;\n}\n/**\n * @name Local Notifications\n * @description\n * This plugin allows you to display local notifications on the device\n *\n * @usage\n * ```typescript\n * import { LocalNotifications } from '@ionic-native/local-notifications/ngx';\n *\n *\n * constructor(private localNotifications: LocalNotifications) { }\n *\n * ...\n *\n *\n * // Schedule a single notification\n * this.localNotifications.schedule({\n *   id: 1,\n *   text: 'Single ILocalNotification',\n *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',\n *   data: { secret: key }\n * });\n *\n *\n * // Schedule multiple notifications\n * this.localNotifications.schedule([{\n *    id: 1,\n *    text: 'Multi ILocalNotification 1',\n *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',\n *    data: { secret:key }\n *   },{\n *    id: 2,\n *    title: 'Local ILocalNotification Example',\n *    text: 'Multi ILocalNotification 2',\n *    icon: 'http://example.com/icon.png'\n * }]);\n *\n *\n * // Schedule delayed notification\n * this.localNotifications.schedule({\n *    text: 'Delayed ILocalNotification',\n *    trigger: {at: new Date(new Date().getTime() + 3600)},\n *    led: 'FF0000',\n *    sound: null\n * });\n * ```\n * @interfaces\n * ILocalNotification\n */\nexport declare class LocalNotifications extends IonicNativePlugin {\n    /**\n     * Informs if the app has the permission to show notifications.\n     * @returns {Promise<boolean>}\n     */\n    hasPermission(): Promise<boolean>;\n    /**\n     * Request permission to show notifications if not already granted.\n     * @returns {Promise<boolean>}\n     */\n    requestPermission(): Promise<boolean>;\n    /**\n     * Schedules a single or multiple notifications\n     * @param options {Notification | ILocalNotification[]} optional\n     */\n    schedule(options?: ILocalNotification | ILocalNotification[]): void;\n    /**\n     * Updates a previously scheduled notification. Must include the id in the options parameter.\n     * @param options {ILocalNotification} optional\n     */\n    update(options?: ILocalNotification): void;\n    /**\n     * Clears single or multiple notifications\n     * @param notificationId {any} A single notification id, or an array of notification ids.\n     * @returns {Promise<any>} Returns a promise when the notification had been cleared\n     */\n    clear(notificationId: any): Promise<any>;\n    /**\n     * Clears all notifications\n     * @returns {Promise<any>} Returns a promise when all notifications have cleared\n     */\n    clearAll(): Promise<any>;\n    /**\n     * Cancels single or multiple notifications\n     * @param notificationId {any} A single notification id, or an array of notification ids.\n     * @returns {Promise<any>} Returns a promise when the notification is canceled\n     */\n    cancel(notificationId: any): Promise<any>;\n    /**\n     * Cancels all notifications\n     * @returns {Promise<any>} Returns a promise when all notifications are canceled\n     */\n    cancelAll(): Promise<any>;\n    /**\n     * Checks presence of a notification\n     * @param notificationId {number}\n     * @returns {Promise<boolean>}\n     */\n    isPresent(notificationId: number): Promise<boolean>;\n    /**\n     * Checks is a notification is scheduled\n     * @param notificationId {number}\n     * @returns {Promise<boolean>}\n     */\n    isScheduled(notificationId: number): Promise<boolean>;\n    /**\n     * Checks if a notification is triggered\n     * @param notificationId {number}\n     * @returns {Promise<boolean>}\n     */\n    isTriggered(notificationId: number): Promise<boolean>;\n    /**\n     * Check if a notification has a given type.\n     * @param {number} id The ID of the notification.\n     * @param {string} type  The type of the notification.\n     * @returns {Promise<boolean>}\n     */\n    hasType(id: number, type: string): Promise<boolean>;\n    /**\n     * Get the type (triggered, scheduled) for the notification.\n     * @param {number} id The ID of the notification.\n     */\n    getType(id: number): Promise<boolean>;\n    /**\n     * Get all the notification ids\n     * @returns {Promise<Array<number>>}\n     */\n    getIds(): Promise<number[]>;\n    /**\n     * Get the ids of scheduled notifications\n     * @returns {Promise<number[]>} Returns a promise\n     */\n    getScheduledIds(): Promise<number[]>;\n    /**\n     * Get the ids of triggered notifications\n     * @returns {Promise<Array<number>>}\n     */\n    getTriggeredIds(): Promise<number[]>;\n    /**\n     * Get a notification object\n     * @param notificationId {any} The id of the notification to get\n     * @returns {Promise<ILocalNotification>}\n     */\n    get(notificationId: any): Promise<ILocalNotification>;\n    /**\n     * Get all notification objects\n     * @returns {Promise<ILocalNotification[]>}\n     */\n    getAll(): Promise<ILocalNotification[]>;\n    /**\n     * Get a scheduled notification object\n     * @param notificationId {any} The id of the notification to get\n     * @returns {Promise<ILocalNotification>}\n     */\n    getScheduled(notificationId: any): Promise<ILocalNotification>;\n    /**\n     * Get a triggered notification object\n     * @param notificationId The id of the notification to get\n     * @returns {Promise<ILocalNotification>}\n     */\n    getTriggered(notificationId: any): Promise<ILocalNotification>;\n    /**\n     * Adds a group of actions\n     * @param groupId The id of the action group\n     * @param actions The actions of this group\n     * @returns {Promise<any>}\n     */\n    addActions(groupId: any, actions: ILocalNotificationAction[]): Promise<any>;\n    /**\n     * Removes a group of actions\n     * @param groupId The id of the action group\n     * @returns {Promise<any>}\n     */\n    removeActions(groupId: any): Promise<any>;\n    /**\n     * Checks if a group of actions is defined\n     * @param groupId The id of the action group\n     * @returns {Promise<boolean>} Whether the group is defined\n     */\n    hasActions(groupId: any): Promise<boolean>;\n    /**\n     * Gets the (platform specific) default settings.\n     * @returns {Promise<any>} An object with all default settings\n     */\n    getDefaults(): Promise<any>;\n    /**\n     * Overwrites the (platform specific) default settings.\n     * @returns {Promise<any>}\n     */\n    setDefaults(defaults: any): Promise<any>;\n    /**\n     * Get all scheduled notification objects\n     * @returns {Promise<Array<ILocalNotification>>}\n     */\n    getAllScheduled(): Promise<ILocalNotification[]>;\n    /**\n     * Get all triggered notification objects\n     * @returns {Promise<Array<ILocalNotification>>}\n     */\n    getAllTriggered(): Promise<ILocalNotification[]>;\n    /**\n     * Sets a callback for a specific event\n     * @param eventName {string} The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions\n     * @return {Observable}\n     */\n    on(eventName: string): Observable<any>;\n    /**\n     * Not an official interface, however its possible to manually fire events.\n     * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions\n     * @param args Optional arguments\n     */\n    fireEvent(eventName: string, args: any): void;\n    /**\n     * Fire queued events once the device is ready and all listeners are registered.\n     * @returns {Promise<any>}\n     */\n    fireQueuedEvents(): Promise<any>;\n}\n"]}