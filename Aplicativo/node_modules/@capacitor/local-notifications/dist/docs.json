{
  "api": {
    "name": "LocalNotificationsPlugin",
    "slug": "localnotificationsplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "schedule",
        "signature": "(options: ScheduleOptions) => Promise<ScheduleResult>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "ScheduleOptions"
          }
        ],
        "returns": "Promise<ScheduleResult>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Schedule one or more local notifications.",
        "complexTypes": [
          "ScheduleResult",
          "ScheduleOptions"
        ],
        "slug": "schedule"
      },
      {
        "name": "getPending",
        "signature": "() => Promise<PendingResult>",
        "parameters": [],
        "returns": "Promise<PendingResult>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Get a list of pending notifications.",
        "complexTypes": [
          "PendingResult"
        ],
        "slug": "getpending"
      },
      {
        "name": "registerActionTypes",
        "signature": "(options: RegisterActionTypesOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "RegisterActionTypesOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Register actions to take when notifications are displayed.\n\nOnly available for iOS and Android.",
        "complexTypes": [
          "RegisterActionTypesOptions"
        ],
        "slug": "registeractiontypes"
      },
      {
        "name": "cancel",
        "signature": "(options: CancelOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "CancelOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Cancel pending notifications.",
        "complexTypes": [
          "CancelOptions"
        ],
        "slug": "cancel"
      },
      {
        "name": "areEnabled",
        "signature": "() => Promise<EnabledResult>",
        "parameters": [],
        "returns": "Promise<EnabledResult>",
        "tags": [
          {
            "name": "deprecated",
            "text": "Use `checkPermissions()` to check if the user has allowed\nnotifications to be displayed."
          },
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Check if notifications are enabled or not.",
        "complexTypes": [
          "EnabledResult"
        ],
        "slug": "areenabled"
      },
      {
        "name": "createChannel",
        "signature": "(channel: NotificationChannel) => Promise<void>",
        "parameters": [
          {
            "name": "channel",
            "docs": "",
            "type": "Channel"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Create a notification channel.\n\nOnly available for Android.",
        "complexTypes": [
          "NotificationChannel"
        ],
        "slug": "createchannel"
      },
      {
        "name": "deleteChannel",
        "signature": "(channel: NotificationChannel) => Promise<void>",
        "parameters": [
          {
            "name": "channel",
            "docs": "",
            "type": "Channel"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Delete a notification channel.\n\nOnly available for Android.",
        "complexTypes": [
          "NotificationChannel"
        ],
        "slug": "deletechannel"
      },
      {
        "name": "listChannels",
        "signature": "() => Promise<ListChannelsResult>",
        "parameters": [],
        "returns": "Promise<ListChannelsResult>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Get a list of notification channels.\n\nOnly available for Android.",
        "complexTypes": [
          "ListChannelsResult"
        ],
        "slug": "listchannels"
      },
      {
        "name": "checkPermissions",
        "signature": "() => Promise<PermissionStatus>",
        "parameters": [],
        "returns": "Promise<PermissionStatus>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Check permission to display local notifications.",
        "complexTypes": [
          "PermissionStatus"
        ],
        "slug": "checkpermissions"
      },
      {
        "name": "requestPermissions",
        "signature": "() => Promise<PermissionStatus>",
        "parameters": [],
        "returns": "Promise<PermissionStatus>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Request permission to display local notifications.",
        "complexTypes": [
          "PermissionStatus"
        ],
        "slug": "requestpermissions"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'localNotificationReceived', listenerFunc: (notification: LocalNotificationSchema) => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'localNotificationReceived'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(notification: LocalNotificationSchema) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Listen for when notifications are displayed.",
        "complexTypes": [
          "PluginListenerHandle",
          "LocalNotificationSchema"
        ],
        "slug": "addlistenerlocalnotificationreceived"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'localNotificationActionPerformed', listenerFunc: (notificationAction: ActionPerformed) => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'localNotificationActionPerformed'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(notificationAction: ActionPerformed) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Listen for when an action is performed on a notification.",
        "complexTypes": [
          "PluginListenerHandle",
          "ActionPerformed"
        ],
        "slug": "addlistenerlocalnotificationactionperformed"
      },
      {
        "name": "removeAllListeners",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Remove all listeners for this plugin.",
        "complexTypes": [],
        "slug": "removealllisteners"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "ScheduleResult",
      "slug": "scheduleresult",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "notifications",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The list of scheduled notifications.",
          "complexTypes": [
            "LocalNotificationDescriptor"
          ],
          "type": "LocalNotificationDescriptor[]"
        }
      ]
    },
    {
      "name": "LocalNotificationDescriptor",
      "slug": "localnotificationdescriptor",
      "docs": "The object that describes a local notification.",
      "tags": [
        {
          "text": "1.0.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The notification identifier.",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "ScheduleOptions",
      "slug": "scheduleoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "notifications",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The list of notifications to schedule.",
          "complexTypes": [
            "LocalNotificationSchema"
          ],
          "type": "LocalNotificationSchema[]"
        }
      ]
    },
    {
      "name": "LocalNotificationSchema",
      "slug": "localnotificationschema",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "title",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The title of the notification.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "body",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The body of the notification, shown below the title.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "largeBody",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets a multiline text block for display in a big text notification style.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "summaryText",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Used to set the summary text detail in inbox and big text notification styles.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The notification identifier.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "schedule",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Schedule this notification for a later time.",
          "complexTypes": [
            "Schedule"
          ],
          "type": "Schedule"
        },
        {
          "name": "sound",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Name of the audio file to play when this notification is displayed.\n\nInclude the file extension with the filename.\n\nOn iOS, the file should be in the app bundle.\nOn Android, the file should be in res/raw folder.\n\nRecommended format is `.wav` because is supported by both iOS and Android.\n\nOnly available for iOS and Android < 26.\nFor Android 26+ use channelId of a channel configured with the desired sound.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "smallIcon",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set a custom status bar icon.\n\nIf set, this overrides the `smallIcon` option from Capacitor\nconfiguration.\n\nIcons should be placed in your app's `res/drawable` folder. The value for\nthis option should be the drawable resource ID, which is the filename\nwithout an extension.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "largeIcon",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set a large icon for notifications.\n\nIcons should be placed in your app's `res/drawable` folder. The value for\nthis option should be the drawable resource ID, which is the filename\nwithout an extension.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "iconColor",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set the color of the notification icon.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "attachments",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set attachments for this notification.",
          "complexTypes": [
            "Attachment"
          ],
          "type": "Attachment[] | undefined"
        },
        {
          "name": "actionTypeId",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Associate an action type with this notification.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "extra",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set extra data to store within this notification.",
          "complexTypes": [],
          "type": "any"
        },
        {
          "name": "threadIdentifier",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Used to group multiple notifications.\n\nSets `threadIdentifier` on the\n[`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "summaryArgument",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The string this notification adds to the category's summary format string.\n\nSets `summaryArgument` on the\n[`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent).\n\nOnly available for iOS 12+.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "group",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Used to group multiple notifications.\n\nCalls `setGroup()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "groupSummary",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "If true, this notification becomes the summary for a group of\nnotifications.\n\nCalls `setGroupSummary()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android when using `group`.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "channelId",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Specifies the channel the notification should be delivered on.\n\nIf channel with the given name does not exist then the notification will\nnot fire. If not provided, it will use the default channel.\n\nCalls `setChannelId()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android 26+.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "ongoing",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "If true, the notification can't be swiped away.\n\nCalls `setOngoing()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "autoCancel",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "If true, the notification is canceled when the user clicks on it.\n\nCalls `setAutoCancel()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "inboxList",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets a list of strings for display in an inbox style notification.\n\nUp to 5 strings are allowed.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string[] | undefined"
        }
      ]
    },
    {
      "name": "Schedule",
      "slug": "schedule",
      "docs": "Represents a schedule for a notification.\n\nUse either `at`, `on`, or `every` to schedule notifications.",
      "tags": [
        {
          "text": "1.0.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "at",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Schedule a notification at a specific date and time.",
          "complexTypes": [
            "Date"
          ],
          "type": "Date"
        },
        {
          "name": "repeats",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Repeat delivery of this notification at the date and time specified by\n`at`.\n\nOnly available for iOS and Android.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "allowWhileIdle",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Allow this notification to fire while in [Doze](https://developer.android.com/training/monitoring-device-state/doze-standby)\n\nOnly available for Android 23+.\n\nNote that these notifications can only fire [once per 9 minutes, per app](https://developer.android.com/training/monitoring-device-state/doze-standby#assessing_your_app).",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "on",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Schedule a notification on particular interval(s).\n\nThis is similar to scheduling [cron](https://en.wikipedia.org/wiki/Cron)\njobs.\n\nOnly available for iOS and Android.",
          "complexTypes": [
            "ScheduleOn"
          ],
          "type": "ScheduleOn"
        },
        {
          "name": "every",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Schedule a notification on a particular interval.",
          "complexTypes": [
            "ScheduleEvery"
          ],
          "type": "ScheduleEvery"
        },
        {
          "name": "count",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Limit the number times a notification is delivered by the interval\nspecified by `every`.",
          "complexTypes": [],
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "Date",
      "slug": "date",
      "docs": "Enables basic storage and retrieval of dates and times.",
      "tags": [],
      "methods": [
        {
          "name": "toString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a string representation of a date. The format of the string depends on the locale.",
          "complexTypes": [],
          "slug": "tostring"
        },
        {
          "name": "toDateString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a date as a string value.",
          "complexTypes": [],
          "slug": "todatestring"
        },
        {
          "name": "toTimeString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a time as a string value.",
          "complexTypes": [],
          "slug": "totimestring"
        },
        {
          "name": "toLocaleString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a value as a string value appropriate to the host environment's current locale.",
          "complexTypes": [],
          "slug": "tolocalestring"
        },
        {
          "name": "toLocaleDateString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a date as a string value appropriate to the host environment's current locale.",
          "complexTypes": [],
          "slug": "tolocaledatestring"
        },
        {
          "name": "toLocaleTimeString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a time as a string value appropriate to the host environment's current locale.",
          "complexTypes": [],
          "slug": "tolocaletimestring"
        },
        {
          "name": "valueOf",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.",
          "complexTypes": [],
          "slug": "valueof"
        },
        {
          "name": "getTime",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the time value in milliseconds.",
          "complexTypes": [],
          "slug": "gettime"
        },
        {
          "name": "getFullYear",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the year, using local time.",
          "complexTypes": [],
          "slug": "getfullyear"
        },
        {
          "name": "getUTCFullYear",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the year using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "getutcfullyear"
        },
        {
          "name": "getMonth",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the month, using local time.",
          "complexTypes": [],
          "slug": "getmonth"
        },
        {
          "name": "getUTCMonth",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the month of a Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "getutcmonth"
        },
        {
          "name": "getDate",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the day-of-the-month, using local time.",
          "complexTypes": [],
          "slug": "getdate"
        },
        {
          "name": "getUTCDate",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the day-of-the-month, using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "getutcdate"
        },
        {
          "name": "getDay",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the day of the week, using local time.",
          "complexTypes": [],
          "slug": "getday"
        },
        {
          "name": "getUTCDay",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the day of the week using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "getutcday"
        },
        {
          "name": "getHours",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the hours in a date, using local time.",
          "complexTypes": [],
          "slug": "gethours"
        },
        {
          "name": "getUTCHours",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the hours value in a Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "getutchours"
        },
        {
          "name": "getMinutes",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the minutes of a Date object, using local time.",
          "complexTypes": [],
          "slug": "getminutes"
        },
        {
          "name": "getUTCMinutes",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the minutes of a Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "getutcminutes"
        },
        {
          "name": "getSeconds",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the seconds of a Date object, using local time.",
          "complexTypes": [],
          "slug": "getseconds"
        },
        {
          "name": "getUTCSeconds",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the seconds of a Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "getutcseconds"
        },
        {
          "name": "getMilliseconds",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the milliseconds of a Date, using local time.",
          "complexTypes": [],
          "slug": "getmilliseconds"
        },
        {
          "name": "getUTCMilliseconds",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "getutcmilliseconds"
        },
        {
          "name": "getTimezoneOffset",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "gettimezoneoffset"
        },
        {
          "name": "setTime",
          "signature": "(time: number) => number",
          "parameters": [
            {
              "name": "time",
              "docs": "A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.",
              "type": "number"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT."
            }
          ],
          "docs": "Sets the date and time value in the Date object.",
          "complexTypes": [],
          "slug": "settime"
        },
        {
          "name": "setMilliseconds",
          "signature": "(ms: number) => number",
          "parameters": [
            {
              "name": "ms",
              "docs": "A numeric value equal to the millisecond value.",
              "type": "number"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "ms A numeric value equal to the millisecond value."
            }
          ],
          "docs": "Sets the milliseconds value in the Date object using local time.",
          "complexTypes": [],
          "slug": "setmilliseconds"
        },
        {
          "name": "setUTCMilliseconds",
          "signature": "(ms: number) => number",
          "parameters": [
            {
              "name": "ms",
              "docs": "A numeric value equal to the millisecond value.",
              "type": "number"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "ms A numeric value equal to the millisecond value."
            }
          ],
          "docs": "Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "setutcmilliseconds"
        },
        {
          "name": "setSeconds",
          "signature": "(sec: number, ms?: number | undefined) => number",
          "parameters": [
            {
              "name": "sec",
              "docs": "A numeric value equal to the seconds value.",
              "type": "number"
            },
            {
              "name": "ms",
              "docs": "A numeric value equal to the milliseconds value.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "sec A numeric value equal to the seconds value."
            },
            {
              "name": "param",
              "text": "ms A numeric value equal to the milliseconds value."
            }
          ],
          "docs": "Sets the seconds value in the Date object using local time.",
          "complexTypes": [],
          "slug": "setseconds"
        },
        {
          "name": "setUTCSeconds",
          "signature": "(sec: number, ms?: number | undefined) => number",
          "parameters": [
            {
              "name": "sec",
              "docs": "A numeric value equal to the seconds value.",
              "type": "number"
            },
            {
              "name": "ms",
              "docs": "A numeric value equal to the milliseconds value.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "sec A numeric value equal to the seconds value."
            },
            {
              "name": "param",
              "text": "ms A numeric value equal to the milliseconds value."
            }
          ],
          "docs": "Sets the seconds value in the Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "setutcseconds"
        },
        {
          "name": "setMinutes",
          "signature": "(min: number, sec?: number | undefined, ms?: number | undefined) => number",
          "parameters": [
            {
              "name": "min",
              "docs": "A numeric value equal to the minutes value.",
              "type": "number"
            },
            {
              "name": "sec",
              "docs": "A numeric value equal to the seconds value.",
              "type": "number | undefined"
            },
            {
              "name": "ms",
              "docs": "A numeric value equal to the milliseconds value.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "min A numeric value equal to the minutes value."
            },
            {
              "name": "param",
              "text": "sec A numeric value equal to the seconds value."
            },
            {
              "name": "param",
              "text": "ms A numeric value equal to the milliseconds value."
            }
          ],
          "docs": "Sets the minutes value in the Date object using local time.",
          "complexTypes": [],
          "slug": "setminutes"
        },
        {
          "name": "setUTCMinutes",
          "signature": "(min: number, sec?: number | undefined, ms?: number | undefined) => number",
          "parameters": [
            {
              "name": "min",
              "docs": "A numeric value equal to the minutes value.",
              "type": "number"
            },
            {
              "name": "sec",
              "docs": "A numeric value equal to the seconds value.",
              "type": "number | undefined"
            },
            {
              "name": "ms",
              "docs": "A numeric value equal to the milliseconds value.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "min A numeric value equal to the minutes value."
            },
            {
              "name": "param",
              "text": "sec A numeric value equal to the seconds value."
            },
            {
              "name": "param",
              "text": "ms A numeric value equal to the milliseconds value."
            }
          ],
          "docs": "Sets the minutes value in the Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "setutcminutes"
        },
        {
          "name": "setHours",
          "signature": "(hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number",
          "parameters": [
            {
              "name": "hours",
              "docs": "A numeric value equal to the hours value.",
              "type": "number"
            },
            {
              "name": "min",
              "docs": "A numeric value equal to the minutes value.",
              "type": "number | undefined"
            },
            {
              "name": "sec",
              "docs": "A numeric value equal to the seconds value.",
              "type": "number | undefined"
            },
            {
              "name": "ms",
              "docs": "A numeric value equal to the milliseconds value.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "hours A numeric value equal to the hours value."
            },
            {
              "name": "param",
              "text": "min A numeric value equal to the minutes value."
            },
            {
              "name": "param",
              "text": "sec A numeric value equal to the seconds value."
            },
            {
              "name": "param",
              "text": "ms A numeric value equal to the milliseconds value."
            }
          ],
          "docs": "Sets the hour value in the Date object using local time.",
          "complexTypes": [],
          "slug": "sethours"
        },
        {
          "name": "setUTCHours",
          "signature": "(hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number",
          "parameters": [
            {
              "name": "hours",
              "docs": "A numeric value equal to the hours value.",
              "type": "number"
            },
            {
              "name": "min",
              "docs": "A numeric value equal to the minutes value.",
              "type": "number | undefined"
            },
            {
              "name": "sec",
              "docs": "A numeric value equal to the seconds value.",
              "type": "number | undefined"
            },
            {
              "name": "ms",
              "docs": "A numeric value equal to the milliseconds value.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "hours A numeric value equal to the hours value."
            },
            {
              "name": "param",
              "text": "min A numeric value equal to the minutes value."
            },
            {
              "name": "param",
              "text": "sec A numeric value equal to the seconds value."
            },
            {
              "name": "param",
              "text": "ms A numeric value equal to the milliseconds value."
            }
          ],
          "docs": "Sets the hours value in the Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "setutchours"
        },
        {
          "name": "setDate",
          "signature": "(date: number) => number",
          "parameters": [
            {
              "name": "date",
              "docs": "A numeric value equal to the day of the month.",
              "type": "number"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "date A numeric value equal to the day of the month."
            }
          ],
          "docs": "Sets the numeric day-of-the-month value of the Date object using local time.",
          "complexTypes": [],
          "slug": "setdate"
        },
        {
          "name": "setUTCDate",
          "signature": "(date: number) => number",
          "parameters": [
            {
              "name": "date",
              "docs": "A numeric value equal to the day of the month.",
              "type": "number"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "date A numeric value equal to the day of the month."
            }
          ],
          "docs": "Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "setutcdate"
        },
        {
          "name": "setMonth",
          "signature": "(month: number, date?: number | undefined) => number",
          "parameters": [
            {
              "name": "month",
              "docs": "A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.",
              "type": "number"
            },
            {
              "name": "date",
              "docs": "A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively."
            },
            {
              "name": "param",
              "text": "date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used."
            }
          ],
          "docs": "Sets the month value in the Date object using local time.",
          "complexTypes": [],
          "slug": "setmonth"
        },
        {
          "name": "setUTCMonth",
          "signature": "(month: number, date?: number | undefined) => number",
          "parameters": [
            {
              "name": "month",
              "docs": "A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.",
              "type": "number"
            },
            {
              "name": "date",
              "docs": "A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively."
            },
            {
              "name": "param",
              "text": "date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used."
            }
          ],
          "docs": "Sets the month value in the Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "setutcmonth"
        },
        {
          "name": "setFullYear",
          "signature": "(year: number, month?: number | undefined, date?: number | undefined) => number",
          "parameters": [
            {
              "name": "year",
              "docs": "A numeric value for the year.",
              "type": "number"
            },
            {
              "name": "month",
              "docs": "A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.",
              "type": "number | undefined"
            },
            {
              "name": "date",
              "docs": "A numeric value equal for the day of the month.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "year A numeric value for the year."
            },
            {
              "name": "param",
              "text": "month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified."
            },
            {
              "name": "param",
              "text": "date A numeric value equal for the day of the month."
            }
          ],
          "docs": "Sets the year of the Date object using local time.",
          "complexTypes": [],
          "slug": "setfullyear"
        },
        {
          "name": "setUTCFullYear",
          "signature": "(year: number, month?: number | undefined, date?: number | undefined) => number",
          "parameters": [
            {
              "name": "year",
              "docs": "A numeric value equal to the year.",
              "type": "number"
            },
            {
              "name": "month",
              "docs": "A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.",
              "type": "number | undefined"
            },
            {
              "name": "date",
              "docs": "A numeric value equal to the day of the month.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "year A numeric value equal to the year."
            },
            {
              "name": "param",
              "text": "month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied."
            },
            {
              "name": "param",
              "text": "date A numeric value equal to the day of the month."
            }
          ],
          "docs": "Sets the year value in the Date object using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "setutcfullyear"
        },
        {
          "name": "toUTCString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a date converted to a string using Universal Coordinated Time (UTC).",
          "complexTypes": [],
          "slug": "toutcstring"
        },
        {
          "name": "toISOString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a date as a string value in ISO format.",
          "complexTypes": [],
          "slug": "toisostring"
        },
        {
          "name": "toJSON",
          "signature": "(key?: any) => string",
          "parameters": [
            {
              "name": "key",
              "docs": "",
              "type": "any"
            }
          ],
          "returns": "string",
          "tags": [],
          "docs": "Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization.",
          "complexTypes": [],
          "slug": "tojson"
        }
      ],
      "properties": []
    },
    {
      "name": "ScheduleOn",
      "slug": "scheduleon",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "year",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "month",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "day",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "hour",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "minute",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "second",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        }
      ]
    },
    {
      "name": "Attachment",
      "slug": "attachment",
      "docs": "Represents a notification attachment.",
      "tags": [
        {
          "text": "1.0.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The attachment identifier.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "url",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The URL to the attachment.\n\nUse the `res` scheme to reference web assets, e.g.\n`res:///assets/img/icon.png`. Also accepts `file` URLs.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "options",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Attachment options.",
          "complexTypes": [
            "AttachmentOptions"
          ],
          "type": "AttachmentOptions"
        }
      ]
    },
    {
      "name": "AttachmentOptions",
      "slug": "attachmentoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "iosUNNotificationAttachmentOptionsTypeHintKey",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets the `UNNotificationAttachmentOptionsTypeHintKey` key in the hashable\noptions of\n[`UNNotificationAttachment`](https://developer.apple.com/documentation/usernotifications/unnotificationattachment).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "iosUNNotificationAttachmentOptionsThumbnailHiddenKey",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets the `UNNotificationAttachmentOptionsThumbnailHiddenKey` key in the\nhashable options of\n[`UNNotificationAttachment`](https://developer.apple.com/documentation/usernotifications/unnotificationattachment).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "iosUNNotificationAttachmentOptionsThumbnailClippingRectKey",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets the `UNNotificationAttachmentOptionsThumbnailClippingRectKey` key in\nthe hashable options of\n[`UNNotificationAttachment`](https://developer.apple.com/documentation/usernotifications/unnotificationattachment).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "iosUNNotificationAttachmentOptionsThumbnailTimeKey",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets the `UNNotificationAttachmentOptionsThumbnailTimeKey` key in the\nhashable options of\n[`UNNotificationAttachment`](https://developer.apple.com/documentation/usernotifications/unnotificationattachment).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "PendingResult",
      "slug": "pendingresult",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "notifications",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The list of pending notifications.",
          "complexTypes": [
            "PendingLocalNotificationSchema"
          ],
          "type": "PendingLocalNotificationSchema[]"
        }
      ]
    },
    {
      "name": "PendingLocalNotificationSchema",
      "slug": "pendinglocalnotificationschema",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "title",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The title of the notification.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "body",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The body of the notification, shown below the title.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The notification identifier.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "schedule",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Schedule this notification for a later time.",
          "complexTypes": [
            "Schedule"
          ],
          "type": "Schedule"
        },
        {
          "name": "extra",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set extra data to store within this notification.",
          "complexTypes": [],
          "type": "any"
        }
      ]
    },
    {
      "name": "RegisterActionTypesOptions",
      "slug": "registeractiontypesoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "types",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The list of action types to register.",
          "complexTypes": [
            "ActionType"
          ],
          "type": "ActionType[]"
        }
      ]
    },
    {
      "name": "ActionType",
      "slug": "actiontype",
      "docs": "A collection of actions.",
      "tags": [
        {
          "text": "1.0.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The ID of the action type.\n\nReferenced in notifications by the `actionTypeId` key.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "actions",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The list of actions associated with this action type.",
          "complexTypes": [
            "Action"
          ],
          "type": "Action[] | undefined"
        },
        {
          "name": "iosHiddenPreviewsBodyPlaceholder",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `hiddenPreviewsBodyPlaceholder` of the\n[`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "iosCustomDismissAction",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `customDismissAction` in the options of the\n[`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "iosAllowInCarPlay",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `allowInCarPlay` in the options of the\n[`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "iosHiddenPreviewsShowTitle",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `hiddenPreviewsShowTitle` in the options of the\n[`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "iosHiddenPreviewsShowSubtitle",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `hiddenPreviewsShowSubtitle` in the options of the\n[`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "Action",
      "slug": "action",
      "docs": "An action that can be taken when a notification is displayed.",
      "tags": [
        {
          "text": "1.0.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The action identifier.\n\nReferenced in the `'actionPerformed'` event as `actionId`.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "title",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The title text to display for this action.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "requiresAuthentication",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `authenticationRequired` in the options of the\n[`UNNotificationAction`](https://developer.apple.com/documentation/usernotifications/unnotificationaction).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "foreground",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `foreground` in the options of the\n[`UNNotificationAction`](https://developer.apple.com/documentation/usernotifications/unnotificationaction).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "destructive",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `destructive` in the options of the\n[`UNNotificationAction`](https://developer.apple.com/documentation/usernotifications/unnotificationaction).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "input",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Use a `UNTextInputNotificationAction` instead of a `UNNotificationAction`.\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "inputButtonTitle",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `textInputButtonTitle` on the\n[`UNTextInputNotificationAction`](https://developer.apple.com/documentation/usernotifications/untextinputnotificationaction).\n\nOnly available for iOS when `input` is `true`.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "inputPlaceholder",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets `textInputPlaceholder` on the\n[`UNTextInputNotificationAction`](https://developer.apple.com/documentation/usernotifications/untextinputnotificationaction).\n\nOnly available for iOS when `input` is `true`.",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "CancelOptions",
      "slug": "canceloptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "notifications",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The list of notifications to cancel.",
          "complexTypes": [
            "LocalNotificationDescriptor"
          ],
          "type": "LocalNotificationDescriptor[]"
        }
      ]
    },
    {
      "name": "EnabledResult",
      "slug": "enabledresult",
      "docs": "",
      "tags": [
        {
          "name": "deprecated"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "value",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Whether or not the device has local notifications enabled.",
          "complexTypes": [],
          "type": "boolean"
        }
      ]
    },
    {
      "name": "Channel",
      "slug": "channel",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The channel identifier.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "name",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The human-friendly name of this channel (presented to the user).",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "description",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The description of this channel (presented to the user).",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "sound",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"jingle.wav\"",
              "name": "example"
            }
          ],
          "docs": "The sound that should be played for notifications posted to this channel.\n\nNotification channels with an importance of at least `3` should have a\nsound.\n\nThe file name of a sound file should be specified relative to the android\napp `res/raw` directory.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "importance",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The level of interruption for notifications posted to this channel.",
          "complexTypes": [
            "Importance"
          ],
          "type": "Importance"
        },
        {
          "name": "visibility",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The visibility of notifications posted to this channel.\n\nThis setting is for whether notifications posted to this channel appear on\nthe lockscreen or not, and if so, whether they appear in a redacted form.",
          "complexTypes": [
            "Visibility"
          ],
          "type": "Visibility"
        },
        {
          "name": "lights",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Whether notifications posted to this channel should display notification\nlights, on devices that support it.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "lightColor",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The light color for notifications posted to this channel.\n\nOnly supported if lights are enabled on this channel and the device\nsupports it.\n\nSupported color formats are `#RRGGBB` and `#RRGGBBAA`.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "vibration",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Whether notifications posted to this channel should vibrate.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "ListChannelsResult",
      "slug": "listchannelsresult",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "channels",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The list of notification channels.",
          "complexTypes": [
            "Channel"
          ],
          "type": "Channel[]"
        }
      ]
    },
    {
      "name": "PermissionStatus",
      "slug": "permissionstatus",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "display",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Permission state of displaying notifications.",
          "complexTypes": [
            "PermissionState"
          ],
          "type": "PermissionState"
        }
      ]
    },
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    },
    {
      "name": "ActionPerformed",
      "slug": "actionperformed",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "actionId",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The identifier of the performed action.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "inputValue",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The value entered by the user on the notification.\n\nOnly available on iOS for notifications with `input` set to `true`.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "notification",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The original notification schema.",
          "complexTypes": [
            "LocalNotificationSchema"
          ],
          "type": "LocalNotificationSchema"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "ScheduleEvery",
      "slug": "scheduleevery",
      "docs": "",
      "types": [
        {
          "text": "'year'",
          "complexTypes": []
        },
        {
          "text": "'month'",
          "complexTypes": []
        },
        {
          "text": "'two-weeks'",
          "complexTypes": []
        },
        {
          "text": "'week'",
          "complexTypes": []
        },
        {
          "text": "'day'",
          "complexTypes": []
        },
        {
          "text": "'hour'",
          "complexTypes": []
        },
        {
          "text": "'minute'",
          "complexTypes": []
        },
        {
          "text": "'second'",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "NotificationChannel",
      "slug": "notificationchannel",
      "docs": "",
      "types": [
        {
          "text": "Channel",
          "complexTypes": [
            "Channel"
          ]
        }
      ]
    },
    {
      "name": "Importance",
      "slug": "importance",
      "docs": "The importance level. For more details, see the [Android Developer Docs](https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_DEFAULT)",
      "types": [
        {
          "text": "1",
          "complexTypes": []
        },
        {
          "text": "2",
          "complexTypes": []
        },
        {
          "text": "3",
          "complexTypes": []
        },
        {
          "text": "4",
          "complexTypes": []
        },
        {
          "text": "5",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "Visibility",
      "slug": "visibility",
      "docs": "The notification visibility. For more details, see the [Android Developer Docs](https://developer.android.com/reference/androidx/core/app/NotificationCompat#VISIBILITY_PRIVATE)",
      "types": [
        {
          "text": "-1",
          "complexTypes": []
        },
        {
          "text": "0",
          "complexTypes": []
        },
        {
          "text": "1",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "PermissionState",
      "slug": "permissionstate",
      "docs": "",
      "types": [
        {
          "text": "'prompt'",
          "complexTypes": []
        },
        {
          "text": "'prompt-with-rationale'",
          "complexTypes": []
        },
        {
          "text": "'granted'",
          "complexTypes": []
        },
        {
          "text": "'denied'",
          "complexTypes": []
        }
      ]
    }
  ],
  "pluginConfigs": [
    {
      "name": "LocalNotifications",
      "slug": "localnotifications",
      "properties": [
        {
          "name": "smallIcon",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"ic_stat_icon_config_sample\"",
              "name": "example"
            }
          ],
          "docs": "Set the default status bar icon for notifications.\n\nIcons should be placed in your app's `res/drawable` folder. The value for\nthis option should be the drawable resource ID, which is the filename\nwithout an extension.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "iconColor",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"#488AFF\"",
              "name": "example"
            }
          ],
          "docs": "Set the default color of status bar icons for notifications.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "sound",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"beep.wav\"",
              "name": "example"
            }
          ],
          "docs": "Set the default notification sound for notifications.\n\nOn Android 26+ it sets the default channel sound and can't be\nchanged unless the app is uninstalled.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ],
      "docs": "On Android, the Local Notifications can be configured with the following options:"
    }
  ]
}